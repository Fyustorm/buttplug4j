allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven'

    group = 'org.metafetish.buttplug'
    version = "0.0." + ( "${System.env.TRAVIS_BUILD_NUMBER?:1}" ) + "-SNAPSHOT"

    repositories {
        mavenCentral()
    }

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

subprojects {
    configurations {
        deployerJars
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
        deployerJars "io.packagecloud.maven.wagon:maven-packagecloud-wagon:0.0.6"
    }

    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "packagecloud+https://packagecloud.io/blackspherefollower/buttplug4j") {
                authentication(password: "$System.env.PACKAGECLOUD_TOKEN")
            }
            pom.project {
                name "Buttplug4j"
                description "Java implementation of the Buttplug WebSocket client"
                url "https://buttplug.io/"
                inceptionYear "2017"

                scm {
                    connection "scm:git:git://github.com/metafetish/buttplug4j.git"
                    developerConnection "scm:git:ssh@github.com:metafetish/buttplug4j.git"
                    url "https://github.com/metafetish/buttplug4j"
                }

                licenses {
                    license {
                        name "BSD 3-Clause License"
                        url "https://github.com/metafetish/buttplug4j/blob/master/LICENSE"
                    }
                }
            }
        }
    }
}


task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}